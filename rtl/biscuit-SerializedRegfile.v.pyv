//=========================================================================
// Serialized Register File. Perform up to 2R1W serially.
//=========================================================================
// This module takes in up to 2R1W and sequentially performs any writes, then any reads, over the course of 1-3 cycles.
// It then outputs the results of the reads for use in the pipeline.
// Writes occur in a single cycle.
// N reads take N+1 cycles.
// Thus, 2R1w takes 4 cycles.

`ifndef BISCUIT_SERIALIZED_REGFILE_V
`define BISCUIT_SERIALIZED_REGFILE_V

<%
#import param_Defines as p
from pyhplib import *
import numpy as np
%>

module biscuit_SerializedRegfile
#(
  parameter P_NLANES = 1
)(
  input                      clk,
  input                      reset,

  input                      rfreq_val,
  output                     rfreq_rdy,
  output                     rfresp_val,
  input                      rfresp_rdy,

  input                      rd_en0,
  input  [4:0]               raddr0,
  input                      rd_en1,
  input  [4:0]               raddr1,

  input                      wen,
  input  [4:0]               waddr,
  input  [P_NLANES * 32-1:0] wdata,

  output [P_NLANES * 32-1:0] rdata0,
  output [P_NLANES * 32-1:0] rdata1
);

localparam C_LINE_WIDTH=P_NLANES*32;

localparam STATE_IDL = 2'd0;
localparam STATE_WRT = 2'd1;
localparam STATE_RS1 = 2'd2;
localparam STATE_RS2 = 2'd3;

reg [1:0] rd_state;
reg [1:0] state_next;
reg [1:0] state_prev;

wire [1:0] state = wen ? STATE_WRT : rd_state;

always @(posedge clk) begin
  if (reset) begin
    rd_state <= STATE_IDL;
    state_prev <= 2'b0;
  end else begin
    rd_state <= state_next;
    state_prev <= state;
  end
end



// w_pending is cleared on cycle of entering WRT state whereas rs*_pending
// is cleared on cycle after because we are guaranteed the write succeeds on that cycle
// and we don't have to transmit any results of the write.

// Whenever W is set high, all functionality stops and the register is updated
// If rs1 or rs2 match, waddr, replace those values.

// reg w_pending;
// reg [4:0] waddr_stored;
// reg [31:0] wdata_stored;
// always @(posedge clk) begin
//   if (reset) begin
//     w_pending <= 1'b0;
//     waddr_stored <= 5'b0;
//     wdata_stored <= {C_LINE_WIDTH{1'b0}};
//   end else if (rfreq_val && rfreq_rdy && wen) begin
//     w_pending <= 1'b1;
//     waddr_stored <= waddr;
//     wdata_stored <= wdata;
//   end else if (state == STATE_WRT) begin
//     w_pending <= 1'b0;
//   end
// end

reg rs1_pending;
reg [4:0] rs1_addr_stored;
always @(posedge clk) begin
  if (reset) begin
    rs1_pending <= 1'b0;
    rs1_addr_stored <= 5'b0;
  end else if (rfreq_val && rfreq_rdy && rd_en0) begin
    rs1_pending <= 1'b1;
    rs1_addr_stored <= raddr0;
  end else if (state == STATE_RS1) begin
    rs1_pending <= 1'b0;
  end
end

reg rs2_pending;
reg [4:0] rs2_addr_stored;
always @(posedge clk) begin
  if (reset) begin
    rs2_pending <= 1'b0;
    rs2_addr_stored <= 5'b0;
  end else if (rfreq_val && rfreq_rdy && rd_en1) begin
    rs2_pending <= 1'b1;
    rs2_addr_stored <= raddr1;
  end else if (state == STATE_RS2) begin
    rs2_pending <= 1'b0;
  end
end

// Indicate when a live transaction is being handled.
reg transaction_pending;
always @(posedge clk) begin
  if (reset) begin
    transaction_pending <= 1'b0;
  end else if (rfreq_val && rfreq_rdy) begin
    transaction_pending <= 1'b1;
  end else if (rfresp_val && rfresp_rdy) begin
    transaction_pending <= 1'b0;
  end
end

// rd_state transition logic
always @(*) begin
  state_next = rd_state;
  case(rd_state)
    STATE_IDL:
      // Ready to accept new instruction
      if (rfreq_val && rfreq_rdy) begin
        if (rd_en0) begin
          state_next = STATE_RS1;
        end else if (rd_en1) begin
          state_next = STATE_RS2;
        end else if (rfresp_rdy) begin
          state_next = STATE_IDL; // Should never execute -- always at least 1 operation per access.
        end else begin
          state_next = STATE_IDL;
        end
      end
    // STATE_WRT:
    //   if (rs1_pending) begin
    //     state_next = STATE_RS1;
    //   end else if (rs2_pending) begin
    //     state_next = STATE_RS2;
    //   end else if (rfresp_rdy && rfreq_val) begin //Immediately accept a new request
    //       if (wen) begin
    //         state_next = STATE_WRT;
    //       end else if (rd_en0) begin
    //         state_next = STATE_RS1;
    //       end else if (rd_en1) begin
    //         state_next = STATE_RS2;
    //       end else if (rfresp_rdy) begin
    //         state_next = STATE_IDL; // Should never execute -- always at least 1 operation per access.
    //       end
    //   end else begin
    //     state_next = STATE_IDL;
    //   end
    STATE_RS1:
      if (wen) begin // Stall on write
        state_next = STATE_RS1;
      end else if (rs2_pending) begin
        state_next = STATE_RS2;
      end else begin
        state_next = STATE_IDL;
      end
    STATE_RS2:
      if (wen) begin // Stall on write
        state_next = STATE_RS1;
      end else begin
        state_next = STATE_IDL;
      end
    default:
      state_next = STATE_IDL;
  endcase
end


// VAL/RDY logic:
//rdy is ! transaction_pending or transaction pending && rfresp_rdy
assign rfreq_rdy = !transaction_pending || (transaction_pending && rfresp_val && rfresp_rdy);
// val is set: on cycle when only W occurs, on cycle AFTER final R occurs
// assign rfresp_val = !((w_pending && (state != STATE_WRT)) || rs1_pending || rs2_pending) && transaction_pending;
assign rfresp_val = !(rs1_pending || rs2_pending) && transaction_pending;

// Instantiate RF bank(s)
wire rf_access = !((state == STATE_WRT) || (state == STATE_RS1) || (state == STATE_RS2));
wire rf_write_n = (state != STATE_WRT);

wire [4:0] local_addr = (state == STATE_WRT) ? waddr :
                       ((state == STATE_RS1) ? rs1_addr_stored :
                       ((state == STATE_RS2) ? rs2_addr_stored :
                                               5'b0));

wire [C_LINE_WIDTH-1:0] line_dout;

genvar bank_idx;
generate
    for(bank_idx = 0; bank_idx < P_NLANES; bank_idx = bank_idx + 1) begin : rfbanks
        wire [31:0] local_dout;
        sram_32_32_freepdk45_wrap bank0
        (
            .clk0   (clk),  //clock
            .csb0   (rf_access), // enable (active low)
            .web0   (rf_write_n), // 0 = write, 1 = read
            .addr0  (local_addr),
            .din0   (wdata),
            .dout0  (local_dout)
        );
        // handle reading x0 (overwrite to 0)
        assign line_dout[(32*(bank_idx+1))-1:(32*bank_idx)] = local_dout;
    end
endgenerate

// Hold read values for rs1 and rs2
// Overwrite values if wen and waddr matches rs*_addr_stored
reg [C_LINE_WIDTH-1:0] rs1_data_stored;
reg [C_LINE_WIDTH-1:0] rs2_data_stored;

  // Gate Clock
  wire write_bypass_rs1_store = wen && (waddr == rs1_addr_stored);
  wire read_rf_rs1_store = (state_prev == STATE_RS1);

  wire rs1_word_stored_en = !(reset || write_bypass_rs1_store || read_rf_rs1_store);
  wire rs1_word_stored_clk_gated;

  biscuit_ClkEnBuf rs1_word_stored_clk_gate
  (
    .clk  (rs1_word_stored_clk_gated),
    .rclk (clk),
    .en_l (rs1_word_stored_en)
  );
always @ (posedge rs1_word_stored_clk_gated) begin
  if (reset) begin
    rs1_data_stored <= {C_LINE_WIDTH{1'b0}};
  end else if (wen && (waddr == rs1_addr_stored)) begin
    rs1_data_stored <= wdata;
  end else if (state_prev == STATE_RS1) begin
    rs1_data_stored <= line_dout;
  end
end

// Gate Clock
  wire write_bypass_rs2_store = wen && (waddr == rs2_addr_stored);
  wire read_rf_rs2_store = (state_prev == STATE_RS2);

  wire rs2_word_stored_en = !(reset || write_bypass_rs2_store || read_rf_rs2_store);
  wire rs2_word_stored_clk_gated;

  biscuit_ClkEnBuf rs2_word_stored_clk_gate
  (
    .clk  (rs2_word_stored_clk_gated),
    .rclk (clk),
    .en_l (rs2_word_stored_en)
  );
always @ (posedge rs2_word_stored_clk_gated) begin
  if (reset) begin
    rs2_data_stored <= {C_LINE_WIDTH{1'b0}};
  end else if (wen && (waddr == rs2_addr_stored)) begin
    rs2_data_stored <= wdata;
  end else if (state_prev == STATE_RS2) begin
    rs2_data_stored <= line_dout;
  end
end

assign rdata0 = (wen && (waddr == rs1_addr_stored)) ? wdata :             // Forward data when writing back on cycle when RFresp is being sent.
               ((state_prev == STATE_RS1) ? line_dout : rs1_data_stored); // RF Takes one cycle to respond to read requests
assign rdata1 = (wen && (waddr == rs2_addr_stored)) ? wdata :
               ((state_prev == STATE_RS2) ? line_dout : rs2_data_stored);
endmodule
`endif